plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.board'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // SpringBoot Dependency [actuator, web, jpa, rest, explorer(시각적으로 보여주기 위한 것), thymeleaf, security]
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // MySQL Dependency [Connector-j, h2]
    implementation 'com.mysql:mysql-connector-j'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // Lombok Dependency
    compileOnly 'org.projectlombok:lombok'
    // SpringBoot Configuration Processor Dependency : User 가 Custom 한 것을 Processor 에서 사용하기 위한 것
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // SpringBoot Devtools Dependency
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // AnnotationProcessor Lombok Dependency
    annotationProcessor 'org.projectlombok:lombok'
    // SpringBoot Test Dependency
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // QueryDSL 설정 => SpringBoot 3.0 이상은 jakarta 로 설정해줘야함! / 2.7 ↓ 는 jpa가능
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    // jpa -> jakarta 로 변경 후 generated folder 에 file 들이 잘 컴파일됨!(주의)
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    // JPA (X) => JAKARTA (O)
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"


}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL 설정부(Variable => file path)
def generated = 'src/main/generated'

// QueryDSL QClass File add location 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// Java Source Set 에 QueryDSL QClass location add
sourceSets {
    main.java.srcDirs += [generated]
}

// Gradle clean 시에 QClass 디렉토리 Delete
clean {
    delete file(generated)
}
